{
	"info": {
		"_postman_id": "1bacdb84-eebd-4ba3-8222-5fc93b5b9fe1",
		"name": "simplebooks",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "getStatus",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"console.log(response.status);\r",
							"console.log(response['status']);\r",
							"\r",
							"pm.test(\"Status should be OK\",() => {\r",
							"pm.expect(response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status should be OK\",() => {\r",
							"pm.expect(1).to.eql(1);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer 58be7a2383f88aa5de24c5621c83586362d1370e8ab60b3a4d4c42c6cbc882d9",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{books}}/status",
					"host": [
						"{{books}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "getBooksParam",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Verify that book The Russian is fiction\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"The Russian\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Verify if the id for the second book is 3\", function () {\r",
							"    var raspuns = pm.response.json();\r",
							"    pm.expect(raspuns[1].id).to.eql(3);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer 58be7a2383f88aa5de24c5621c83586362d1370e8ab60b3a4d4c42c6cbc882d9",
						"type": "default"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/books?type=fiction",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "fiction"
						},
						{
							"key": "foo",
							"value": "bar",
							"disabled": true
						},
						{
							"key": null,
							"value": "1",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getBooksParam 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"console.log(response[1].id);\r",
							"\r",
							"\r",
							"pm.test(\"verify the name of the first book \", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Just as I Am\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer 58be7a2383f88aa5de24c5621c83586362d1370e8ab60b3a4d4c42c6cbc882d9",
						"type": "default"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/books?type=non-fiction",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "non-fiction"
						},
						{
							"key": "foo",
							"value": "bar",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getBooks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Check that the first book is availabe\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    book = jsonData[1];\r",
							"    pm.expect(book.available).to.be.true; \r",
							"});\r",
							"\r",
							"pm.test(\"Check that the details for the first book are correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].name).to.eql('Just as I Am'),\r",
							"    pm.expect(jsonData[0].id).to.eql(2);\r",
							"    pm.expect(jsonData[0].type).to.eql('non-fiction');\r",
							"    pm.expect(jsonData[0].available).to.eql(false);\r",
							"  });\r",
							"\r",
							"\r",
							"  pm.test(\"Check that the type for the first book is non-fiction\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    book = jsonData[0];\r",
							"    pm.expect(book.type).to.eql('non-fiction'); \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer 58be7a2383f88aa5de24c5621c83586362d1370e8ab60b3a4d4c42c6cbc882d9",
						"type": "default"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/books?type=non-fiction",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "non-fiction"
						},
						{
							"key": "foo",
							"value": "bar",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get a single book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if tha book is in stock\", () => {\r",
							"    pm.expect(1).to.be.above(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"verify that the price of the book is 16,2\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.price).to.eql(16.2);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the autor for this book is Brit Bennett\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.author).to.eql(\"Brit Bennett\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books/3",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a single book 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{books}}/books/1",
					"host": [
						"{{books}}"
					],
					"path": [
						"books",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that for the second book the quantity is 1\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    book = jsonData[1];\r",
							"    pm.expect(book.quantity).to.be.eql(1); \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer 58be7a2383f88aa5de24c5621c83586362d1370e8ab60b3a4d4c42c6cbc882d9",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{books}}/orders",
					"host": [
						"{{books}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete order 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer 58be7a2383f88aa5de24c5621c83586362d1370e8ab60b3a4d4c42c6cbc882d9",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{books}}/orders/F6230BivvjCV_sh6m6Koo",
					"host": [
						"{{books}}"
					],
					"path": [
						"orders",
						"F6230BivvjCV_sh6m6Koo"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete order 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Order id exist\"), function () {\r",
							"pm.expect(1).to.equal(1);\r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer 58be7a2383f88aa5de24c5621c83586362d1370e8ab60b3a4d4c42c6cbc882d9",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{books}}/orders/rMlJ-zO3myhCOfkFe2KOh",
					"host": [
						"{{books}}"
					],
					"path": [
						"orders",
						"rMlJ-zO3myhCOfkFe2KOh"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete order 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Not failing\"), function () {\r",
							"    pm.expect(true).to.eql(false);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer 58be7a2383f88aa5de24c5621c83586362d1370e8ab60b3a4d4c42c6cbc882d9",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{books}}/orders/UDXY1BJN3j-CFPXUGPc4Z",
					"host": [
						"{{books}}"
					],
					"path": [
						"orders",
						"UDXY1BJN3j-CFPXUGPc4Z"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete order 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer 58be7a2383f88aa5de24c5621c83586362d1370e8ab60b3a4d4c42c6cbc882d9",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{books}}/orders/RygWJJzIYYbjhLDGe5PSY",
					"host": [
						"{{books}}"
					],
					"path": [
						"orders",
						"RygWJJzIYYbjhLDGe5PSY"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete order 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer 58be7a2383f88aa5de24c5621c83586362d1370e8ab60b3a4d4c42c6cbc882d9",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{books}}/orders/E5jGoXVpwl3DBga_5CSm9",
					"host": [
						"{{books}}"
					],
					"path": [
						"orders",
						"E5jGoXVpwl3DBga_5CSm9"
					]
				}
			},
			"response": []
		},
		{
			"name": "Order books valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that the order is created\", function () {\r",
							"     pm.expect(pm.response.json().created).to.be.true; \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer 58be7a2383f88aa5de24c5621c83586362d1370e8ab60b3a4d4c42c6cbc882d9",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"bookId\": 1,\r\n    \"quantity\": 1, \r\n    \"customerName\": \"Anton Popescu\"   \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{books}}/orders",
					"host": [
						"{{books}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "createOrder 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if the response returns error and This book is not in stock\", function () {\r",
							"   pm.expect(pm.response.text()).to.include(\"error\", \"This book is not in stock.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer 58be7a2383f88aa5de24c5621c83586362d1370e8ab60b3a4d4c42c6cbc882d9",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"bookId\": 2,\r\n    \"customerName\": \"Marin Ionescu\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "createOrder token invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if the response returns error and This book is not in stock\", function () {\r",
							"   pm.expect(pm.response.text()).to.include(\"error\", \"This book is not in stock.\");\r",
							"});\r",
							"\r",
							"var raspuns = pm.response.json()\r",
							"pm.test(\"Response returns correct error message\", function ()\r",
							"{pm.expect(raspuns.error).to.eql(\"Invalid bearer token.\");});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer 58be7a2383f88aa5de24c5621c83586362d1370e8ab60b3a4d4c42c6cb82d9",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"bookId\": 2,\r\n    \"customerName\": \"Marin Ionescu\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "createOrder 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Order id is available\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(1).to.eql(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer 58be7a2383f88aa5de24c5621c83586362d1370e8ab60b3a4d4c42c6cbc882d9",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"bookId\": 1,\r\n    \"customerName\": \"Marin Ionescu\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "createOrder 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer 58be7a2383f88aa5de24c5621c83586362d1370e8ab60b3a4d4c42c6cbc882d9",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"bookId\": 1,\r\n    \"customerName\": \"{{$randomFullName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "createOrder 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer 58be7a2383f88aa5de24c5621c83586362d1370e8ab60b3a4d4c42c6cbc882d9",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"bookId\": 1,\r\n    \"customerName\": \"Marin Ionescu\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "createOrder 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer 58be7a2383f88aa5de24c5621c83586362d1370e8ab60b3a4d4c42c6cbc882d9",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"bookId\": 1,\r\n    \"customerName\": \"Gabi\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "createToken",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"Gabi\",\r\n   \"clientEmail\": \"gabi28@example.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/api-clients/",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"api-clients",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", () => {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the customer name for this book is John\"),() =>{\r",
							" var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.customerName).to.eql(\"John\");\r",
							"\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer 58be7a2383f88aa5de24c5621c83586362d1370e8ab60b3a4d4c42c6cbc882d9",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"customerName\": \"John \"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders/BnrumToD5Gg7hM8KZV7GK",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						"BnrumToD5Gg7hM8KZV7GK"
					]
				}
			},
			"response": []
		},
		{
			"name": "updateOrders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if the response returns error\", function () {\r",
							"   pm.expect(pm.response.text()).to.include(\"error\", \"No order with id UDXY1BJN3j-CFPXUGPc4Z.\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify response message is Not Found\", () => \r",
							"{pm.expect(pm.response.status).to.eql('Not Found');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer 58be7a2383f88aa5de24c5621c83586362d1370e8ab60b3a4d4c42c6cbc882d9",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"bookId\": 1,\r\n    \"quantity\": 1, \r\n    \"customerName\": \"Anton Popescu\"   \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders/UDXY1BJN3j-CFPXUGPc4Z",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders",
						"UDXY1BJN3j-CFPXUGPc4Z"
					],
					"query": [
						{
							"key": "au",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "updateOrders 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer 58be7a2383f88aa5de24c5621c83586362d1370e8ab60b3a4d4c42c6cbc882d9",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"bookId\": 1,\r\n    \"quantity\": 1, \r\n    \"customerName\": \"Olga\"   \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders/hOP8dnNCtC75uYo-JHOZ6",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders",
						"hOP8dnNCtC75uYo-JHOZ6"
					],
					"query": [
						{
							"key": "au",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "updateOrders 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify empty body\", function () {\r",
							"   pm.expect(pm.response.text()).to.be.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer 58be7a2383f88aa5de24c5621c83586362d1370e8ab60b3a4d4c42c6cbc882d9",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \r\n    \"customerName\": \"Geo\"   \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders/CRnSjYiuEhBLgADIyTi80",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders",
						"CRnSjYiuEhBLgADIyTi80"
					],
					"query": [
						{
							"key": "au",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "updateOrders invalid order id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 800ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if the response returns correct error message\", function ()\r",
							"{pm.expect(pm.response.text()).to.include('No order with id F6230BivvjCV_sh6m6Koo');});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer 58be7a2383f88aa5de24c5621c83586362d1370e8ab60b3a4d4c42c6cbc882d9",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \r\n    \"customerName\": \"David\"   \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders/F6230BivvjCV_sh6m6Koo",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders",
						"F6230BivvjCV_sh6m6Koo"
					],
					"query": [
						{
							"key": "au",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "updateOrders 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify empty body\", function () {\r",
							"   pm.expect(pm.response.text()).to.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Verify response message is No Content\", () => \r",
							"{pm.expect(pm.response.status).to.eql('No Content');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer 58be7a2383f88aa5de24c5621c83586362d1370e8ab60b3a4d4c42c6cbc882d9",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"bookId\": 1,\r\n    \"quantity\": 1, \r\n    \"customerName\": \"Gabi\"   \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders/IXQSox_o_u4pta00JObSp",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders",
						"IXQSox_o_u4pta00JObSp"
					],
					"query": [
						{
							"key": "au",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://simple-books-api.glitch.me"
		},
		{
			"key": "orderId",
			"value": "VC6ef6sssFKDXZ0bgrnIb"
		},
		{
			"key": "orderId",
			"value": ""
		},
		{
			"key": "variable_key",
			"value": ""
		}
	]
}